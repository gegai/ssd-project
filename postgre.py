# encoding: utf-8import psycopg2import timeimport paramikoclass SSD(object):    def Cmd(self,ip,user,password,port,cmd):        ssh = paramiko.SSHClient()        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())        try:            ssh.connect(hostname=ip, port=port, username=user, password=password)            # cmd='cd /sys/block/dfa/shannon/;cat access_mode'            stdin, stdout, stderr = ssh.exec_command(cmd)            result = stdout.read()            if not result:                result = stderr.read()            ssh.close()            result_decode=result.decode()            return  result_decode        except Exception, e:            print "error %s" % str(e)            pass#连接postgresql数据库class ConnectDB(object):    def connect_db(self):        conn=psycopg2.connect(database="ssd",user="ssd",password="ssd",host="10.10.10.62",port="5432")        if conn:            print "postgresql connect successfully!!"        else:            print "postgresql connect error!"        return conn    # '''创建un_group分组'''    #    # def create_ungroup(self):    #     conn = ConnectDB().connect_db()    #    #     cur = conn.cursor()    #     cur.execute("insert into ssd_group(group_name) VALUES('un_group');")    #     conn.commit()    '''获取主机信息'''    def db_hostinfo(self):        conn=ConnectDB().connect_db()        cur=conn.cursor()        cur.execute("SELECT * FROM ssd_host;")        rows=cur.fetchall()        conn.commit()        ssh_list=[]        for item in rows:            ssh_dict={}            ssh_dict['ip']=item[0]            ssh_dict['user']=item[2]            ssh_dict['password']=item[3]            ssh_dict['port']=item[4]            ssh_dict['group_id']=item[6]            ssh_dict['sshgroup_id']=item[7]            ssh_dict['id']=item[5]            ssh_dict['card_info']=item[8]            ssh_list.append(ssh_dict)        return ssh_list    '''        获取主机的卡信息,cmd传过来的值不能直接用，需要splitlines()去掉占位符    '''    def get_cardinfo(self):        ssh_dict = ConnectDB().db_hostinfo()        card_list = []        for item in ssh_dict:            try:                cmd_card = "cd /sys/block/;ls|grep ^df"                result_card = SSD().Cmd(item['ip'], item['user'], item['password'], int(item['port']), cmd_card)                if result_card is not None:                    card = result_card.splitlines()                    card_info={}                    card_info['ip']=item['ip']                    card_info['id']=item['id']                    card_info['cardinfo']=card                    card_list.append(card_info)            except Exception as e:                print "cmd  error!"                print "error %s" % str(e)        return card_list    def cardinfo_to_db(self):        conn=ConnectDB().connect_db()        card_list=ConnectDB().get_cardinfo()        cur=conn.cursor()        update_card=("UPDATE ssd_host set cardinfo=%s where id=%s;")        select_card=("select * from ssd_host;")        try:            for item in card_list:                print "-----------card_list-----------------"                print item                card = item['cardinfo']                cur.execute(update_card,(card,item['id']))                cur.execute(select_card)                card_values=cur.fetchall()                conn.commit()            print "postgresql_cardinfo update successful!"        except Exception as e:            print "postgresql_cardinfo update error!"            print "error %s" % str(e)        finally:            print "pg closed!"            cur.close()            conn.close()    ''' 根据id查询卡信息'''    def select_card_by_id(self,id):        conn = ConnectDB().connect_db()        cur = conn.cursor()        select_card=("select cardinfo from ssd_host where id=%s;")        try:            cur.execute(select_card,id)            card_values=cur.fetchall()            conn.commit()            print "postgresql_cardinfo select successful!"            # print card_values            return card_values        except Exception as e:            print "postgresql_cardinfo select error!"            print "error %s" % str(e)        finally:            print "pg closed!"    '''获取监控信息'''    def get_monitor_info(self):        monitor_item_value_list=[]        host=ConnectDB().db_hostinfo()        for item in host:            # print ("----------------------------")            # print item            if item['card_info']is None:                continue            card_info1=item['card_info'][1:-1]            # print "------------"            # print card_info1            # for i in card_info1:				# print i            card = card_info1.split(",")            # print "-----------------card-------------"            # print card            for i in card:                cmd1 = 'cd /sys/block/' +i+ '/shannon/;cat access_mode;cat temperature_int;cat temperature_flash;cat dynamic_bad_blkcnt;cat estimated_life_left;cat host_read_bandwidth;cat host_read_iops;cat host_read_latency;cat host_write_bandwidth;cat host_write_iops;cat host_write_latency;cat seu_flag'                cmd2 = "python shannon-status.py |grep 'Media Status'|awk -F: '{print $2}'"                try:                    # print card_info                    result1=SSD().Cmd(item['ip'],item['user'],item['password'],int(item['port']),cmd1)                    # print "----------------------------result1---------"                    # print result1                    result2=SSD().Cmd(item['ip'],item['user'],item['password'],int(item['port']),cmd2)                    media= result2.strip()                    # print type(media)                    if result1 or result2 is not None:                        each_number= result1.splitlines()                        media_each_line=media.splitlines()[0]                        # print "-------------media--------------"                        #                        # print media_each_line[0]                        monitor_item_value={}                        monitor_item_value['ip']=item['ip']                        monitor_item_value['card']=i                        monitor_item_value['Access Mode']=each_number[0][-9:]                        monitor_item_value['Controller Temperature']=each_number[1]                        monitor_item_value['Flash Temperature']=each_number[2]                        monitor_item_value['Dynamic Bad Blocks']=each_number[3]                        monitor_item_value['Estimated_Life_Left']=each_number[4]+'%'                        monitor_item_value['host_read_bandwidth']=each_number[5]                        monitor_item_value['host_read_iops']=each_number[6]                        monitor_item_value['host_read_latency']=each_number[7]                        monitor_item_value['host_write_bandwidth']=each_number[8]                        monitor_item_value['host_write_iops']=each_number[9]                        monitor_item_value['host_write_latency']=each_number[10]                        monitor_item_value['Media Status']=media_each_line                        monitor_item_value['SEU Flag']=each_number[11]                        monitor_item_value_list.append(monitor_item_value)                except Exception as e:                    print "cmd  error!"                    print "error %s" % str(e)        # print monitor_item_value_list        return monitor_item_value_list    '''获取监控值状态'''    def get_monitor_state(self):        conn=ConnectDB().connect_db()        cur=conn.cursor()        # cur.execute("select a.monitoritem,a.value,b.threshold,b.warning,b.danger from ssd_monitor a LEFT OUTER JOIN ssd_threshold b on a.monitoritem=b.monitoritem;")        cur.execute("select b.monitoritem,b.threshold,b.warning,b.danger from ssd_threshold b;")        values=cur.fetchall()        conn.commit()        state_json={}        monitor_item_value_list = ConnectDB().get_monitor_info()        ControllerTemperature=monitor_item_value_list[0]['Controller Temperature']        # ControllerTemperature='95'        AccessMode=monitor_item_value_list[0]['Access Mode']        Estimated_Life_Left=monitor_item_value_list[0]['Estimated_Life_Left']        SEUFlag=monitor_item_value_list[0]['SEU Flag']        MediaStatus=monitor_item_value_list[0]['Media Status']        DynamicBadBlocks=monitor_item_value_list[0]['Dynamic Bad Blocks']        FlashTemperature=monitor_item_value_list[0]['Flash Temperature']        for i in values:            # print ("------------i-------------")            # print i[0]            if i[0]=='Controller Temperature':                if ControllerTemperature<i[2]:                    state_json[i[0]]='normal'                    print "normal"                elif i[2]<=ControllerTemperature<i[3]:                    state_json[i[0]]='warning'                else:                    state_json[i[0]]='danger'            elif i[0]=='Access Mode':                if cmp(AccessMode,i[1])==0:                    state_json[i[0]]='normal'                elif cmp(AccessMode,i[2]):                    state_json[i[0]]='warning'                elif cmp(AccessMode,i[3]):                    state_json[i[0]]='danger'                else:                    state_json[i[0]]='error'            elif i[0]=='Estimated_Life_Left':                if Estimated_Life_Left>i[2]:                    state_json[i[0]]='normal'                elif i[2]<=Estimated_Life_Left<i[3]:                    state_json[i[0]]='warning'                else:                    state_json[i[0]]='danger'            elif i[0]=='Media Status':                if cmp(MediaStatus,i[1])==0:                    state_json[i[0]]='normal'                else:                    state_json[i[0]]='danger'            elif i[0]=='Dynamic Bad Blocks':                if DynamicBadBlocks<i[1]:                    state_json[i[0]]='normal'                else:                    state_json[i[0]]='danger'            elif i[0]=='SEU Flag':                if cmp(SEUFlag,i[1])==0:                    state_json[i[0]]='normal'                else:                    state_json[i[0]]='danger'            elif i[0]=='Flash Temperature':                if FlashTemperature< i[2]:                    state_json[i[0]] = 'normal'                    print "normal"                elif i[2] <= FlashTemperature < i[3]:                    state_json[i[0]] = 'warning'                else:                    state_json[i[0]] = 'danger'            else:                 state_json[i[0]]='normal'        return state_json    '''将监控项的值存入数据库'''    def monitor_to_db(self):        conn=ConnectDB().connect_db()        cur=conn.cursor()        monitor_item_value_list=ConnectDB().get_monitor_info()        state_json=ConnectDB().get_monitor_state()        update_state="update ssd_monitor set state=%s where monitoritem=%s;"        insert_sql = "insert into ssd_monitor(monitoritem,value,host_id,card)values(%s,%s,%s,%s);"        delect_sql="DELETE from ssd_monitor; "        '''为了测试用先删除再添加 '''        try:            # cur.execute(delect_sql)            # conn.commit()            for item in monitor_item_value_list:                cur.execute("select id from ssd_host where ip=%s",(item['ip'],))                id_db=cur.fetchall()                conn.commit()                id=id_db[0][0]                card=item['card']                for key in item:                    # print key                    if key!='ip'and key!='card':                        cur.execute(insert_sql,(key,item[key],id,card))                        conn.commit()            try:                for key in state_json:                    cur.execute(update_state,(state_json[key],key))                    conn.commit()                print "postgresql update successful!"            except Exception as e:                print "postgresql update error!"                print "error %s" % str(e)            print "postgresql insert successful!"        except Exception as e:                print "postgresql insert error!"                print "error %s" % str(e)        finally:            cur.close()            conn.close()    '''将监控项状态值为danger的值存入告警信息表'''    def monitor_by_danger_to_warning(self):        conn=ConnectDB().connect_db()        cur=conn.cursor()        insert_warn="insert into ssd_warning (warn_ip,warn_mask,warn_level,warn_item,ssd_value,warn_time,ssd_threshold,card)select a.ip,a.mask,b.state,b.monitoritem,b.value,b.monitor_time,b.threshold,b.card from ssd_host a LEFT OUTER JOIN(select c.host_id,c.state,c.monitoritem,c.value,c.monitor_time,c.card,d.threshold from ssd_monitor c ,ssd_threshold d where c.monitoritem=d.monitoritem)b on a.id=b.host_id where b.state='danger' ;"        select="select * from ssd_warning;"        delect_warn="DELETE from ssd_warning; "        try:            cur.execute(insert_warn)            conn.commit()            print "warning_table insert successful!"        except Exception as e:                print "warning_table insert error!"                print "error %s" % str(e)        finally:            print "pg closed!"            cur.close()            conn.close()    '''    将超过一天的数据添加到ssd_arch_warning    '''    def olddata_to_archwarn(self):        conn=ConnectDB().connect_db()        cur=conn.cursor()        insert_old_data=("insert into ssd_arch_warning(monitoritem,state,old_value,old_time,host_id) select monitoritem,state,value,monitor_time,host_id from ssd_monitor where monitor_time<= now() - interval '1 day';")        select_old_data=("select * from ssd_arch_warning;")        try:            cur.execute(insert_old_data)            cur.execute(select_old_data)            old_values=cur.fetchall()            conn.commit()            print "postgresql insert old successful!"        except Exception as e:            print "postgresql insert old error!"            print "error %s" % str(e)        finally:            print "pg closed!"            cur.close()            conn.close()'''定时取数'''def sleeptime():    conn = ConnectDB().connect_db()    cur = conn.cursor()    select_apptime = ("select * from ssd_config_time where app_time_hour is not null;")    try:        cur.execute(select_apptime)        values = cur.fetchall()        conn.commit()        value = values[0]        id = value[0]        config_time = value[1]        app_time_hour = value[2]        app_time_minute = value[3]        app_time_second = value[4]        return app_time_hour * 3600 + app_time_minute * 60 + app_time_second    except Exception as e:        print "postgresql insert old error!"        print "error %s" % str(e)    finally:        print "pg closed!"        cur.close()        conn.close()if __name__ == '__main__':    ConnectDB().get_cardinfo()    second = sleeptime()    while 1==1:        ConnectDB().cardinfo_to_db()        ConnectDB().monitor_to_db()        ConnectDB().get_monitor_state()        ConnectDB().monitor_by_danger_to_warning()        ConnectDB().olddata_to_archwarn()        time.sleep(second)        print time.time(), 'do sth'