# encoding: utf-8import psycopg2import timeimport paramiko# from api.constant.Constant import Constantclass Constant(object):    SUCCESS_CODE = 10000    SUCCESS_MSG = u'操作成功！'    ERROR_CODE = 10001    ERROR_MSG = u'操作失败！'    INSERT_SUCCESS_CODE = 10000    INSERT_SUCCESS_MSG = u'插入成功！'    INSERT_ERROR_CODE = 10001    INSERT_ERROR_MSG = u'插入失败！'    DELETE_SUCCESS_CODE=10000    DELETE_SUCCESS_MSG=u'删除成功！'    DELETE_ERROR_CODE=10001    DELETE_ERROR_MSG=u'删除失败！'    DELETE_NOTEXIT_CODE=10002    DELETE_NOTEXIT_MSG=u'分组不存在！'    DB_INSERT_SECCESS_CODE = 10000    DB_INSERT_SECCESS_MSG = 'insert successful!'    DB_INSERT_ERROR_CODE = 10004    DB_INSERT_ERROR_MSG = 'insert failure!'# class SSD(object):####     def Cmd(self,ip,user,password,port,cmd):##         ssh = paramiko.SSHClient()##         ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())##         try:##             ssh.connect(hostname=ip, port=port, username=user, password=password)###             # cmd='cd /sys/block/dfa/shannon/;cat access_mode'##             stdin, stdout, stderr = ssh.exec_command(cmd)##             result = stdout.read()##             if not result:##                 result = stderr.read()##             ssh.close()##             result_decode=result.decode()##             return  result_decode##         except Exception, e:##             print "error %s" % str(e)##             pass#连接postgresql数据库class ConnectDB(object):    def connect_db(self):        conn=psycopg2.connect(database="ssd",user="ssd",password="ssd",host="127.0.0.1",port="5432")        if conn:            print "postgresql connect successfully!!"        else:            print "postgresql connect error!"        return conn    '''创建un_group分组'''    def create_ungroup(self):        conn = ConnectDB().connect_db()        cur = conn.cursor()        cur.execute("insert into ssd_group(group_name) VALUES('un_group');")        conn.commit()    '''获取主机信息'''    def db_hostinfo(self):        conn=ConnectDB().connect_db()        cur=conn.cursor()        cur.execute("SELECT * FROM ssd_host;")        rows=cur.fetchall()        conn.commit()        ssh_list=[]        for item in rows:            ssh_dict={}            ssh_dict['ip']=item[0]            ssh_dict['user']=item[2]            ssh_dict['password']=item[3]            ssh_dict['port']=item[4]            ssh_dict['group_id']=item[6]            ssh_dict['sshgroup_id']=item[7]            ssh_dict['id']=item[5]            ssh_dict['card_info']=item[8]            ssh_list.append(ssh_dict)        return ssh_list    '''        获取主机的卡信息,cmd传过来的值不能直接用，需要splitlines()去掉占位符    '''    # def get_cardinfo(self):    #    #     ssh_dict = ConnectDB().db_hostinfo()    #    #     card_list = []    #    #     for item in ssh_dict:    #    #         try:    #    #             cmd_card = "cd /sys/block/;ls|grep ^df"    #    #    #    #             result_card = SSD().Cmd(item['ip'], item['user'], item['password'], int(item['port']), cmd_card)    #             # result_card = SSD().Cmd('10.10.10.62', 'root', 'password', 22, cmd)    #    #             print result_card    #    #             if result_card is not None:    #                 card = result_card.splitlines()    #                 card_info={}    #                 card_info['ip']=item['ip']    #                 card_info['id']=item['id']    #                 card_info['cardinfo']=card    #                 card_list.append(card_info)    #    #         except Exception as e:    #    #             print "cmd  error!"    #    #             print "error %s" % str(e)    #     print card_list    #    #     return card_list    def cardinfo_to_db(self):        conn=ConnectDB().connect_db()        card_list=ConnectDB().get_cardinfo()        cur=conn.cursor()        update_card=("UPDATE ssd_host set cardinfo=%s where id=%s;")        select_card=("select * from ssd_host;")        try:            for item in card_list:                print "-----------card_list-----------------"                print item                card = item['cardinfo']                cur.execute(update_card,(card,item['id']))                cur.execute(select_card)                card_values=cur.fetchall()                conn.commit()            print "postgresql_cardinfo update successful!"        except Exception as e:            print "postgresql_cardinfo update error!"            print "error %s" % str(e)        finally:            print "pg closed!"            cur.close()            conn.close()    '''将监控项状态值为danger的值存入告警信息表,将超过一天的数据添加到ssd_arch_warning'''    def monitor_operate(self):        ret_json = {}        conn=ConnectDB().connect_db()        cur=conn.cursor()        insert_warn="insert into ssd_warning (warn_ip,warn_mask,warn_level,warn_item,ssd_value,warn_time,ssd_threshold,card,hostname)select a.ip,a.mask,b.state,b.monitoritem,b.value,b.monitor_time,b.threshold,b.card,a.hostname from ssd_host a LEFT OUTER JOIN(select c.host_id,c.state,c.monitoritem,c.value,c.monitor_time,c.card,d.threshold from ssd_monitor c ,ssd_threshold d where c.monitoritem=d.monitoritem)b on a.id=b.host_id where b.state='danger' ;"        # select="select * from ssd_warning;"        # delect_warn1="DELETE from ssd_warning; "        insert_old_data = ("insert into ssd_arch_warning(monitoritem,state,old_value,old_time,host_id) select monitoritem,state,value,monitor_time,host_id from ssd_monitor where monitor_time<= now() - interval '1 day';")        delete_old_data = ("delete from ssd_monitor where monitor_time<= now() - interval '1 day';")        delect_warn="delete from ssd_monitor where state='danger'; "        try:            cur.execute(insert_warn)            cur.execute(insert_old_data)            cur.execute(delete_old_data)            cur.execute(delect_warn)            conn.commit()            data="monitor operate successful!"            ret_json['msg'] =data            ret_json['status'] = '10000'        except Exception as e:            print "error %s" % str(e)            ret_json['status'] = '10001'            ret_json['msg'] = e.message        finally:            print "pg closed!"            cur.close()            conn.close()        return ret_json    # '''    #    # 将超过一天的数据添加到ssd_arch_warning    #    # '''    #    # def olddata_to_archwarn(self):    #    #     conn=ConnectDB().connect_db()    #    #     cur=conn.cursor()    #    #     insert_old_data=("insert into ssd_arch_warning(monitoritem,state,old_value,old_time,host_id) select monitoritem,state,value,monitor_time,host_id from ssd_monitor where monitor_time<= now() - interval '1 day';")    #     delete_old_data=("delete from ssd_monitor where monitor_time<= now() - interval '1 day';")    #     select_old_data=("select * from ssd_arch_warning;")    #    #     try:    #    #         cur.execute(insert_old_data)    #         cur.execute(delete_old_data)    #    #         cur.execute(select_old_data)    #    #         old_values=cur.fetchall()    #    #         conn.commit()    #    #         print "postgresql insert old successful!"    #    #     except Exception as e:    #    #         print "postgresql insert old error!"    #    #         print "error %s" % str(e)    #    #     finally:    #    #         print "pg closed!"    #    #         cur.close()    #    #         conn.close()    '''定时取数'''    def sleeptime(self):        conn = ConnectDB().connect_db()        cur = conn.cursor()        select_apptime = ("select * from ssd_config_time where app_time_hour is not null;")        try:            cur.execute( select_apptime)            values = cur.fetchall()            conn.commit()            value=values[0]            id=value[0]            config_time=value[1]            app_time_hour=value[2]            app_time_minute=value[3]            app_time_second=value[4]            return app_time_hour*3600 + app_time_minute*60 + app_time_second        except Exception as e:            print "postgresql insert old error!"            print "error %s" % str(e)        finally:            print "pg closed!"            cur.close()            conn.close()    # return hour*3600 + min*60 + secif __name__ == '__main__':    ConnectDB().get_cardinfo()    second = sleeptime()    while 1==1:        time.sleep(second)        print time.time(),'do sth'        ConnectDB().cardinfo_to_db()        ConnectDB().monitor_to_db()        ConnectDB().get_monitor_state()        ConnectDB().monitor_by_danger_to_warning()        ConnectDB().olddata_to_archwarn()