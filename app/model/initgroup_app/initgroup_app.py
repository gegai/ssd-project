# encoding: utf-8from api.constant.Constant import Constant# from app.connectdatabase.postgre import ConnectDBimport psycopg2import timefrom app.config import Configclass SSDItem(object):    '''连接数据库并执行sql语句 '''    def operate_db_not_select(self,sql):        ret_json = {'status': Constant.SUCCESS_CODE}        conn = psycopg2.connect(database=Config.SSD_DATABASE_NAME, user=Config.SSD_DATABASE_USERNAME,                                password=Config.SSD_DATABASE_PASSWORD, host=Config.SSD_DATABASE_IP,                                port=Config.SSD_DATABASE_PORT)        if conn:            print "postgresql connect successfully!!"        else:            print "postgresql connect error!"        cur = conn.cursor()        try:            cur.execute(sql)            conn.commit()        except Exception, e:            ret_json['status'] = Constant.ERROR_CODE            ret_json['msg'] = e.message        finally:            cur.close()            conn.close()        return ret_json    def operate_db_select(self,sql):        ret_json = {'status': Constant.SUCCESS_CODE}        conn = psycopg2.connect(database=Config.SSD_DATABASE_NAME, user=Config.SSD_DATABASE_USERNAME,                                password=Config.SSD_DATABASE_PASSWORD, host=Config.SSD_DATABASE_IP,                                port=Config.SSD_DATABASE_PORT)        if conn:            print "postgresql connect successfully!!"        else:            print "postgresql connect error!"        cur = conn.cursor()        try:            cur.execute(sql)            conn.commit()            rows = cur.fetchall()            ret_json['res'] = rows        except Exception, e:            ret_json['status'] = Constant.ERROR_CODE            ret_json['msg'] = e.message        finally:            cur.close()            conn.close()        return ret_json    # def executesql(self,tag,sql1,*args):    #     ret_json = {'status': Constant.SUCCESS_CODE}    #    #     conn=psycopg2.connect(database=Config.SSD_DATABASE_NAME, user=Config.SSD_DATABASE_USERNAME, password=Config.SSD_DATABASE_PASSWORD, host=Config.SSD_DATABASE_IP, port=Config.SSD_DATABASE_PORT)    #    #     if conn:    #    #         print "postgresql connect successfully!!"    #    #     else:    #    #         print "postgresql connect error!"    #     cur = conn.cursor()    #    #     try:    #         if tag == 'two':    #             cur.execute(sql1, (args[0], args[1]))    #    #    #         if tag == 'four':    #             cur.execute(sql1, (args[0], args[1],args[2],args[3]))    #    #         elif tag == 'one':    #             print "-------------------------------"    #             result =cur.execute(sql1,(args[0]))    #             print result    #    #         elif tag=='senven':    #    #             cur.execute(sql1,(args[0],args[1],args[2],args[3],args[4],args[5],args[6]))    #    #         else:    #    #             cur.execute(sql1)    #         conn.commit()    #    #         if cur is not None:    #    #             rows=cur.fetchall()    #    #             ret_json['res']=rows    #    #     except Exception, e:    #    #         ret_json['status'] = Constant.ERROR_CODE    #    #         ret_json['msg'] = e.message    #    #     finally:    #    #         cur.close()    #    #         conn.close()    #    #     return ret_json    '''    初始化分组    '''    def initgroup(self):        ret_json = {'status': Constant.SUCCESS_CODE}        try:            select1=("select * from ssd_group;")            result=SSDItem().operate_db_select(select1)            group_list=[]            for item in result['res']:                group_dict={}                group_dict['group_id']=item[0]                group_dict['group_name']=item[1]                group_list.append(group_dict)            ret_json['group_list']=group_list        except Exception, e:            ret_json['status'] = Constant.ERROR_CODE            print "error %s" % str(e)            ret_json['msg'] = e.message        return ret_json    '''初始化sshgroup分组'''    def sshgroup(self):        ret_json = {'status': Constant.SUCCESS_CODE}        try:            select1=("select sshgroup_id,ip from ssd_sshgroup;")            # result=SSDItem().executesql('none',select1)            result=SSDItem().operate_db_select(select1)            sshgroup_list=[]            for item in result['res']:                group_dict={}                group_dict['sshgroup_id']=item[0]                group_dict['ip']=item[1]                sshgroup_list.append(group_dict)            ret_json['sshgroup_list']=sshgroup_list        except Exception, e:            ret_json['status'] = Constant.ERROR_CODE            print "error %s" % str(e)            ret_json['msg'] = e.message        return ret_json    '''    初始化第一个IP信息    '''    def initipinfo(self,id):        ret_json = {'status': Constant.SUCCESS_CODE}        try:            select1="select ip,cardinfo,id,hostname from ssd_host where id=%d;"%(int(id))            count="select count(*) from ssd_monitor where state <> 'normal' and host_id=%d;"%(int(id))            # select2=("select b.threshold,a.monitoritem,a.host_id,a.state,a.value from ssd_monitor a LEFT OUTER JOIN ssd_threshold b on a.monitoritem=b.monitoritem where a.host_id=%s;")            select2="select b.threshold,a.monitoritem,a.state,a.value,a.card,a.monitor_time from ssd_monitor a LEFT OUTER JOIN ssd_threshold b on a.monitoritem=b.monitoritem where (a.host_id,a.monitoritem,a.monitor_time) in (select host_id,monitoritem,max(monitor_time) from ssd_monitor group by host_id,monitoritem) and a.host_id=%d;"%(int(id))            result=SSDItem().operate_db_select(select1)            result1=SSDItem().operate_db_select(select2)            result3=SSDItem().operate_db_select(count)            ip_list=[]            for item in result1['res']:                monitor_time=item[5].strftime('%Y-%m-%d %H:%M:%S')                monitor_dict={}                monitor_dict['threshold']=item[0]                monitor_dict['monitoritem']=item[1]                monitor_dict['state']=item[2]                monitor_dict['value']=item[3]                monitor_dict['card']=item[4]                monitor_dict['monitortime']=monitor_time                ip_list.append(monitor_dict)            for item in result['res']:                print item                ret_json['ip']=item[0]                ret_json['card_info']=item[1]                if item[3]:                    ret_json['hostname']=item[3].replace(' ','')                else:                    ret_json['hostname'] = item[3]            ret_json['monitor_data']=ip_list            ret_json['error_num']=result3['res'][0][0]        except Exception, e:            print "---------------------initinfo------"            print "error %s" % str(e)            ret_json['status'] = Constant.ERROR_CODE            ret_json['msg'] = e.message        return ret_json    '''    所有主机的报警信息    '''    def host_error_all(self):        ret_json = {'status': Constant.SUCCESS_CODE}        # ret_json={'msg':Constant.SUCCESS_MSG}        try:            select1=("select a.warn_ip,a.warn_level,a.warn_item,a.ssd_value,a.operate_state,a.warn_time,a.ssd_threshold,a.warn_id,a.card,a.hostname from ssd_warning a  ORDER BY a.warn_level ASC,a.warn_time DESC,a.operate_state desc;")            # result=SSDItem().executesql('none',select1)            result=SSDItem().operate_db_select(select1)            monitor_list=[]            for item in result['res']:                print item                record_time=item[5].strftime('%Y-%m-%d %H:%M:%S')                warn_dict={}                warn_dict['warn_ip']=item[0]                warn_dict['warn_level']=item[1]                warn_dict['warn_item']=item[2]                warn_dict['ssd_value']=item[3]                warn_dict['operate_state']=item[4]                warn_dict['time']=record_time                warn_dict['threshold']=item[6]                warn_dict['id']=item[7]                warn_dict['card']=item[8]                if item[9]:                    warn_dict['hostname']=item[9].replace(' ', '')                else:                    warn_dict['hostname'] = item[9]                monitor_list.append(warn_dict)            ret_json['data']=monitor_list            return ret_json        except Exception, e:            print "error %s" % str(e)            ret_json['status'] = Constant.ERROR_CODE            ret_json['msg'] = e.message        return ret_json    '''    按指定标准搜索报警信息    '''    def error_byitem(self,search_item,table_item):        ret_json = {'status': Constant.SUCCESS_CODE}        try:            select1="select * from ssd_warning where "+table_item+"='%s';" %(search_item)            # result=SSDItem().executesql('one',select1,search_item)            result=SSDItem().operate_db_select(select1)            warn_list=[]            for item in result['res']:                print item                record_time=item[8].strftime('%Y-%m-%d %H:%M:%S')                warn_dict={}                warn_dict['warn_ip']=item[1]                warn_dict['warn_level']=item[3]                warn_dict['warn_item']=item[4]                warn_dict['ssd_value']=item[6]                warn_dict['operate_state']=item[7]                warn_dict['time']=record_time                warn_dict['threshold']=item[5]                warn_dict['card']=item[9]                if item[10]:                    warn_dict['hostname']=item[10].replace(' ','')                else:                    warn_dict['hostname'] = item[10]                warn_list.append(warn_dict)            ret_json['data']=warn_list        except Exception, e:            print "error %s" % str(e)            ret_json['status'] = Constant.ERROR_CODE            ret_json['msg'] = e.message        return ret_json    '''根据卡信息实时查看监控信息  2018-04-26'''    def select_monitor_by_card(self,host_id,card):        ret_json = {'status': Constant.SUCCESS_CODE}        try:            select2 = "select ip from ssd_host where id=%d;"%(int(host_id))            select1 = "select b.threshold,a.monitoritem,a.state,a.value,a.card,a.monitor_time from ssd_monitor a LEFT OUTER JOIN ssd_threshold b on a.monitoritem=b.monitoritem where (a.host_id,a.monitoritem,a.monitor_time,a.card) in (select host_id,monitoritem,max(monitor_time),card from ssd_monitor group by host_id,monitoritem,card) and a.host_id=%d and a.card='%s';" %(int(host_id),card)            result1 = SSDItem().operate_db_select(select2)            result = SSDItem().operate_db_select(select1)            print result            ret_json['ip'] = result1['res'][0][0]            monitor_list = []            for each in result['res']:                monitor_time = each[5].strftime('%Y-%m-%d %H:%M:%S')                monitor = {}                monitor['threshold'] = each[0]                monitor['monitoritem'] = each[1]                monitor['state'] = each[2]                monitor['value'] = each[3]                monitor['card'] = each[4]                monitor['monitortime'] = monitor_time                monitor_list.append(monitor)            ret_json['data'] = monitor_list        except Exception, e:            print "error %s" % str(e)            ret_json['status'] = Constant.ERROR_CODE            ret_json['msg'] = e.message            print e        return ret_json    '''根据告警级别搜索'''    def error_host_bylevel(self, monitor_level):        ret_json = {'status': Constant.SUCCESS_CODE}        try:            result = SSDItem().error_byitem(monitor_level, 'warn_level')            ret_json['data'] = result['data']        except Exception, e:            print "error %s" % str(e)            ret_json['status'] = Constant.ERROR_CODE            ret_json['msg'] = e.message        return ret_json    '''根据监控项搜索'''    def error_host_bymonitor_item(self, monitor_item):        ret_json = {'status': Constant.SUCCESS_CODE}        try:            result = SSDItem().error_byitem(monitor_item, 'warn_item')            ret_json['data'] = result['data']        except Exception, e:            print "error %s" % str(e)            ret_json['status'] = Constant.ERROR_CODE            ret_json['msg'] = e.message        return ret_json# result1=SSDItem().error_host_bymonitor_item(('Access Mode',))# print result1# print result1# result=SSDItem().initipinfo("45740")# print result# print result# result2=SSDItem().group_host_info('1')# result2=SSDItem().select_monitor_by_card(('8289',),('dfa',))# print result3# result4=SSDItem().host_monitorinfo(('172.16.1.103',))# result5=SSDItem().group_rename('1','ssd03')# list_ip=[('172.16.1.104',),('172.16.1.105',),('172.16.1.106',)]# result6=SSDItem().move_group(list_ip,'1','2')# result7=SSDItem().delete_host(list_ip)# result8=SSDItem().error_host_byitem(('SEU Flag',))# print result8# result9=SSDItem().host_error_all()# print result9# print result9# result3=SSDItem().host_baseinfo(('172.16.1.103',))