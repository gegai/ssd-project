# encoding: utf-8from api.constant.Constant import Constant# from app.connectdatabase.postgre import ConnectDBimport psycopg2import timefrom app.config import Configclass SSDItem(object):    # def connect_db(self):    #    #     conn=psycopg2.connect(database="ssd",user="ssd",password="ssd",host="10.10.10.199",port="5444")    #     if conn:    #         print "postgresql connect successfully!!"    #     else:    #         print "postgresql connect error!"    #     return conn    '''    连接数据库并执行sql语句    '''    # def executesql(self,tag,sql1,value1,value2,value3,value4,value5,value6):    def executesql(self,tag,sql1,value1,value2,value3,value4,value5,value6):    # def executesql(self,sql1,*args):        ret_json = {'status': Constant.SUCCESS_CODE}        conn=psycopg2.connect(database=Config.SSD_DATABASE_NAME, user=Config.SSD_DATABASE_USERNAME, password=Config.SSD_DATABASE_PASSWORD, host=Config.SSD_DATABASE_IP, port=Config.SSD_DATABASE_PORT)        if conn:            print "postgresql connect successfully!!"        else:            print "postgresql connect error!"        cur=conn.cursor()        try:            if tag=='two':                cur.execute(sql1,(value1,value2))            elif tag=='one':                cur.execute(sql1,(value1))            elif tag=='six':                cur.execute(sql1,(value1,value2,value3,value4,value5,value6))            else:                cur.execute(sql1)            # cur.execute(sql1,*args)            conn.commit()            if cur is not None:                rows=cur.fetchall()                ret_json['res']=rows        except Exception, e:            ret_json['status'] = Constant.ERROR_CODE            ret_json['msg'] = e.message        finally:            cur.close()            conn.close()        return ret_json    '''    初始化分组    '''    def initgroup(self):        ret_json = {'status': Constant.SUCCESS_CODE}        try:            select1=("select * from ssd_group;")            result=SSDItem().executesql('none',select1,'null','null','null','null','null','null')            group_list=[]            for item in result['res']:                group_dict={}                group_dict['group_id']=item[0]                group_dict['group_name']=item[1]                group_list.append(group_dict)            ret_json['group_list']=group_list        except Exception, e:            ret_json['status'] = Constant.ERROR_CODE            print "error %s" % str(e)            ret_json['msg'] = e.message        return ret_json    '''    初始化第一个IP信息    '''    def initipinfo(self,id):        ret_json = {'status': Constant.SUCCESS_CODE}        try:            select1=("select ip,cardinfo,id from ssd_host where id=%s;")            count='''select count(*) from ssd_warning where warn_ip=(select ip from ssd_host where id=%s);'''            # count=("select count(*) from ssd_warning where warn_ip=%s;")            # select2=("select b.threshold,a.monitoritem,a.host_id,a.state,a.value from ssd_monitor a LEFT OUTER JOIN ssd_threshold b on a.monitoritem=b.monitoritem where a.host_id=%s;")            select2=("select b.threshold,a.monitoritem,a.state,a.value,a.card from ssd_monitor a LEFT OUTER JOIN ssd_threshold b on a.monitoritem=b.monitoritem where (a.host_id,a.monitoritem,a.monitor_time) in (select host_id,monitoritem,max(monitor_time) from ssd_monitor group by host_id,monitoritem,card) and a.host_id=%s;")            result=SSDItem().executesql('one',select1,id,'null','null','null','null','null')            print result            result1=SSDItem().executesql('one',select2,id,'null','null','null','null','null')            print result1            result3=SSDItem().executesql('one',count,id,'null','null','null','null','null')            ip_list=[]            for item in result1['res']:                print item                monitor_dict={}                monitor_dict['threshold']=item[0]                monitor_dict['monitoritem']=item[1]                monitor_dict['state']=item[2]                monitor_dict['value']=item[3]                monitor_dict['card']=item[4]                ip_list.append(monitor_dict)            for item in result['res']:                print item                ret_json['ip']=item[0]                ret_json['card_info']=item[1]            ret_json['monitor_data']=ip_list            ret_json['error_num']=result3['res'][0][0]        except Exception, e:            print "---------------------initinfo------"            print "error %s" % str(e)            ret_json['status'] = Constant.ERROR_CODE            ret_json['msg'] = e.message        return ret_json    '''    所有主机的报警信息    '''    def host_error_all(self):        ret_json = {'status': Constant.SUCCESS_CODE}        # ret_json={'msg':Constant.SUCCESS_MSG}        try:            select1=("select a.warn_ip,a.warn_level,a.warn_item,a.ssd_value,a.operate_state,a.warn_time,a.ssd_threshold,a.warn_id,a.card from ssd_warning a  ORDER BY a.operate_state desc;")            result=SSDItem().executesql('none',select1,'null','null','null','null','null','null')            monitor_list=[]            for item in result['res']:                print item                record_time=item[5].strftime('%Y-%m-%d %H:%M:%S')                warn_dict={}                warn_dict['warn_ip']=item[0]                warn_dict['warn_level']=item[1]                warn_dict['warn_item']=item[2]                warn_dict['ssd_value']=item[3]                warn_dict['operate_state']=item[4]                warn_dict['time']=record_time                warn_dict['threshold']=item[6]                warn_dict['id']=item[7]                warn_dict['card']=item[8]                monitor_list.append(warn_dict)            ret_json['data']=monitor_list            return ret_json        except Exception, e:            print "error %s" % str(e)            ret_json['status'] = Constant.ERROR_CODE            ret_json['msg'] = e.message        return ret_json    '''    按监控项搜索报警信息    '''    def error_host_byitem(self,monitor_item):        ret_json = {'status': Constant.SUCCESS_CODE}        try:            select1=("select * from ssd_warning where warn_item=%s;")            result=SSDItem().executesql('one',select1,monitor_item,'null','null','null','null','null')            warn_list=[]            for item in result['res']:                print item                record_time=item[8].strftime('%Y-%m-%d %H:%M:%S')                warn_dict={}                warn_dict['warn_ip']=item[1]                warn_dict['warn_level']=item[3]                warn_dict['warn_item']=item[4]                warn_dict['ssd_value']=item[6]                warn_dict['operate_state']=item[7]                warn_dict['time']=record_time                warn_dict['threshold']=item[5]                warn_dict['card']=item[9]                warn_list.append(warn_dict)            ret_json['data']=warn_list        except Exception, e:            print "error %s" % str(e)            ret_json['status'] = Constant.ERROR_CODE            ret_json['msg'] = e.message        return ret_json# result1=SSDItem().initgroup()# print result1# print result1# result=SSDItem().initipinfo(('172.16.1.103',))# print result# result2=SSDItem().group_host_info('1')# print result3# result4=SSDItem().host_monitorinfo(('172.16.1.103',))# result5=SSDItem().group_rename('1','ssd03')# list_ip=[('172.16.1.104',),('172.16.1.105',),('172.16.1.106',)]# result6=SSDItem().move_group(list_ip,'1','2')# result7=SSDItem().delete_host(list_ip)# result8=SSDItem().error_host_byitem(('SEU Flag',))# print result8# result9=SSDItem().host_error_all()# print result9# result3=SSDItem().host_baseinfo(('172.16.1.103',))