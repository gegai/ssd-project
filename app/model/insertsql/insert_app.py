# encoding: utf-8from api.constant.Constant import Constantfrom app.model.initgroup_app.initgroup_app import SSDItemfrom app.model.ssditem.ssditem_app import SSHinfo# from app.connectdatabase.postgre import ConnectDBimport psycopg2class Insert(object):    '''添加主机'''    def add_host(self,hostname,ip, mask, username, password,port, group_id,sshgroup_id):        ret_json ={}        try:            hostname1=hostname.replace(" ","")            print hostname1            select1="INSERT INTO ssd_host(hostname,ip,mask,username,password,port,group_id,sshgroup_id) VALUES ('%s','%s','%s','%s','%s','%s',%d,%d);" %(hostname1,ip,mask,username,password,port,int(group_id),int(sshgroup_id))            select2="select * from ssd_host where ip='%s' and mask='%s';" %(ip,mask)            # result=SSDItem().executesql('two',select2,ip,mask)            result=SSDItem().operate_db_select(select2)            print result['res']            if result['res']:                ret_json['status'] = Constant.ERROR_Already_CODE                ret_json['msg']=Constant.ERROR_Already_MSG            else:                # result1=SSDItem().executesql(select1,hostname,ip,mask,username,password,port,group_id)                result1=SSDItem().operate_db_not_select(select1)                print result1                if result1['status']!=10000:                    ret_json['status'] = Constant.ERROR_Hostsave_CODE                    ret_json['msg'] = Constant.ERROR_Hostsave_MSG                else:                    sql_select="select id from ssd_host where ip='%s' and mask='%s';"%(ip,mask)                    result2= SSDItem().operate_db_select(sql_select)                    print result2                    id=result2['res'][0][0]                    sql_select = "select a.ip, a.username, a.password, a.port,a.id, b.ip, b.username, b.password, b.port from ssd_host a LEFT OUTER JOIN ssd_sshgroup b on a.sshgroup_id = b.sshgroup_id where a.id = %d;" % (id)                    result = SSDItem().operate_db_select(sql_select)                    print result['res']                    ip = result['res'][0][0]                    username = result['res'][0][1]                    password = result['res'][0][2]                    port = result['res'][0][3]                    id_db = result['res'][0][4]                    ssh_ip = result['res'][0][5]                    ssh_username = result['res'][0][6]                    ssh_password = result['res'][0][7]                    ssh_port = result['res'][0][8]                    result4=SSHinfo().execute_ssh_host(ip,username,password,port,id_db,ssh_ip,ssh_username,ssh_password,ssh_port)                    print "-------------------------------------------*****"                    print result4                    ret_json['status']=result4['status']                    ret_json['msg']=result4['msg']        except Exception, e:            print "error %s" % str(e)            ret_json['status'] = Constant.ERROR_CODE            ret_json['msg'] = e.message        return ret_json    '''    创建分组    '''    def insert_group(self, group_name):        ret_json = {}        try:            select1="INSERT INTO  ssd_group (group_name) VALUES ('%s');" %(group_name)            # SSDItem().executesql('one', select1, group_name)            result1=SSDItem().operate_db_not_select(select1)            if result1['status']!=10000:                ret_json['status'] = Constant.ERROR_CODE            ret_json = {'status': Constant.SUCCESS_CODE}            select2="select * from ssd_group;"            # result=SSDItem().executesql('none',select2)            result=SSDItem().operate_db_select(select2)            group_list=[]            for item in result['res']:                group_dict={}                group_dict['group_id']=item[0]                group_dict['group_name']=item[1]                group_list.append(group_dict)            ret_json['group_list']=group_list        except Exception, e:            print "error %s" % str(e)            ret_json['status'] = Constant.ERROR_CODE            ret_json['msg'] = e.message        return ret_json    '''删除分组 '''    def drop_group(self, id_list):        ret_json = {}        try:            ret_json['status']=Constant.DELETE_SUCCESS_CODE            ret_json['msg']=Constant.DELETE_SUCCESS_MSG            # ret_json = {'status': Constant.SUCCESS_CODE}            for item in id_list:                print item                select2 = "select * from ssd_group where group_id=%d;" % (int(item))                select3 = "update ssd_host set group_id=(select group_id from ssd_group where group_name='un_group') where group_id=%d;" %(int(item))                result=SSDItem().operate_db_select(select2)                print result                if len(result['res'])!=0:                    select1 = "DELETE FROM ssd_group WHERE group_id=%d;" % (int(item))                    # SSDItem().executesql('one',select3,item)                    result=SSDItem().operate_db_not_select(select3)                    if result['status']!=10000:                        ret_json['status'] = Constant.ERROR_CODE                    # SSDItem().executesql('one', select1,item)                    result1=SSDItem().operate_db_not_select(select1)                    if result1['status']!=10000:                        ret_json['status'] = Constant.ERROR_CODE                else:                    ret_json['status']=Constant.DELETE_NOTEXIT_CODE                    ret_json['msg']=Constant.DELETE_NOTEXIT_MSG        except Exception, e:            ret_json['status'] = Constant.ERROR_CODE            print "error %s" % str(e)        return ret_json    '''    操作状态    '''    def operate_state(self,warn_id,operate_state):        ret_json={}        try:            ret_json = {'status': Constant.SUCCESS_CODE}            selete1="update ssd_warning set operate_state='%s' where warn_id=%d;" %(operate_state,int(warn_id))            # SSDItem().executesql('two',selete1,operate_state,warn_id)            result1=SSDItem().operate_db_not_select(selete1)            if result1['status'] != 10000:                ret_json['status'] = Constant.ERROR_CODE        except Exception, e:            ret_json['status'] = Constant.ERROR_CODE            print "error %s" % str(e)        return ret_json# result=Insert().insert_group(('llj',))# hostname,ip, mask, username, password,port, group_id,sshgroup_id# result=Insert().add_host('cyyyyy','172.16.1.103','255.255.255.0','ssd_test','123456',22,1,1)# print result# list=['50814']# result=Insert().drop_group(list)# print result# result=Insert().operate_state("1111","on")# print result